" vim: foldmethod=marker

set nocompatible              " Be iMproved
let mapleader = ','           " Set <Leader>

" Plugin configuration {{{1

" Download vim-plug if not installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" tpope-suite {{{2
"Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
" Load sensible first, so options can be overridden
runtime! plugin/sensible.vim

" Git integration {{{2
Plug 'tpope/vim-fugitive'
Plug 'gregsexton/gitv', {'on': ['Gitv']}
Plug 'airblade/vim-gitgutter'
nmap <silent> <Leader>gs :Gstatus<CR>
nmap <silent> <Leader>gd :Gdiff<CR>
nmap <silent> <Leader>gl :Gitv<CR>
nmap <silent> <Leader>gL :Gitv!<CR>

" undotree {{{2
Plug 'mbbill/undotree'
nmap <silent> <Leader>u :UndotreeToggle<CR>

" TaskList {{{2
Plug 'vim-scripts/TaskList.vim'
let g:tlTokenList = ['FIXME', 'TODO', 'fixme', 'todo', 'FixMe', 'ToDo']
nmap <silent> <Leader>tl <Plug>TaskList

" ack {{{2
Plug 'mileszs/ack.vim'
let g:ackhighlight = 1

" command-t {{{2
Plug 'wincent/command-t',
      \ {'do': 'cd ruby/command-t/ext/command-t && ruby extconf.rb && make'}
nmap <silent> <Leader>tv :CommandT $HOME/.vim<CR>

" Smart-Tabs {{{2
Plug 'vim-scripts/Smart-Tabs', {'for': ['c', 'cpp', 'objc', 'objcpp', 'cs']}

" tcomment {{{2
Plug 'tomtom/tcomment_vim'
let g:tcomment#options = {'whitespace' : 'no'}

" snippets {{{2
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
let g:UltiSnipsExpandTrigger = '<C-CR>'
let g:UltiSnipsJumpForwardTrigger  ='<C-CR>'
let g:UltiSnipsJumpBackwardTrigger = '<C-S-CR>'

" YouCompleteMe {{{2
Plug 'Valloric/YouCompleteMe',
      \ {'do': './install.py --clang-completer > ~/ycm.log'}
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_goto_buffer_command = 'split-or-existing-window'

augroup ycm-mappings
  autocmd!
  autocmd FileType
        \ c,cpp,objc,objcpp,cuda,cs,go,java,javascript,python,rust,typescript
        \ nmap <silent> <buffer>go :YcmCompleter GoTo<Cr>
  autocmd FileType
        \ c,cpp,objc,objcpp,cuda,cs,java,javascript,python,typescript,rust
        \ nmap <silent> <buffer>K :YcmCompleter GetDoc<Cr>
augroup END

" vim-stay {{{2
Plug 'zhimsel/vim-stay'

" FastFold {{{2
Plug 'Konfekt/FastFold'

" SimpylFold {{{2
Plug 'tmhedberg/SimpylFold'
"augroup SimpylFold
"  autocmd!
"  autocmd BufWinEnter *.py setlocal foldexpr=SimpylFold(v:lnum) foldmethod=expr
"  autocmd BufWinLeave *.py setlocal foldexpr< foldmethod<
"augroup END

" Tagbar {{{2
Plug 'majutsushi/tagbar'
nmap <silent> <Leader>o :TagbarToggle<CR>

" CCTree {{{2
Plug 'hari-rangarajan/CCTree', {'for': ['c', 'cpp', 'java']}

" ALE {{{2
Plug 'w0rp/ale'
let g:ale_echo_msg_format = '%severity%: %s (%linter% %code%)'

" ListToggle {{{2
Plug 'Valloric/ListToggle'
let g:lt_location_list_toggle_map = '<Leader>el'
let g:lt_quickfix_list_toggle_map = '<Leader>eq'

" vimtex {{{2
Plug 'lervag/vimtex'
"Plug '~/packages/vimtex'
let g:vimtex_view_automatic = 0
let g:vimtex_view_method = 'zathura'

let g:vimtex_fold_enabled = 1

let g:vimtex_complete_enabled = 1
let g:vimtex_complete_close_braces = 0
if !exists('g:ycm_semantic_triggers')
  let g:ycm_semantic_triggers = {}
endif

"let g:vimtex_quickfix_latexlog = {
"      \ 'overfull' : 0,
"      \ 'underfull' : 0,
"      \ 'packages' : {
"      \   'default' : 0,
"      \ },
"      \}

" vim-airline {{{2
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_symbols_ascii = 1
let g:airline#extensions#tabline#enabled = 1


" base16 {{{2
Plug 'chriskempson/base16-vim'
let g:airline_theme='base16'

" Currently unused plugins {{{2
"" solarized {{{3
"Plug 'altercation/vim-colors-solarized'
"let g:airline_theme='solarized'

" }}}2

call plug#end()

" Post-plug configuration {{{1
" vim-stay {{{2
set viewoptions=cursor,folds " Adjust :mkview to make vim-stay work

" vimtex {{{2
let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme

" colorscheme {{{2
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
else
  colorscheme base16-default-dark
endif

"colorscheme solarized | call togglebg#map("<F5>")

" General settings {{{1

set autochdir            " Change working directory to file directory
set autowrite            " Save before commands like :next and :make
set hidden               " Hide buffers when they are abandoned
set noswapfile           " Do not use swap file
set wildmode=longest:full " Set autocomplete command behavior
set mouse=a              " Enable mouse usage (all modes)
set completeopt=menuone,preview " Set completion options
set showcmd              " Show number of selected lines ++ in the bottom line

" Enable persistent undo
set undofile
set undolevels=1000
set undoreload=10000
set undodir=$HOME/.vim/undo
if !isdirectory(&undodir)
  call mkdir(&undodir)
endif

" Editing behavior
set copyindent           " Don't replace tabs with spaces when copying indent
set preserveindent       " Don't replace tabs with spaces when adjusting indent
set expandtab            " Expand tabs as spaces
set shiftwidth=4         " Set width of autoindentation
set textwidth=79         " Auto-format, e.g., gq, wraps here (0: disable)
set formatoptions=cql1j  " Set auto-format options
set nojoinspaces         " Don't have <S-J> (joining) insert double spaces.

" Search behavior
set ignorecase           " Do case insensitive matching
set smartcase            " Do smart case matching
set hlsearch             " Highlight search

" Always start a server
if empty(v:servername) && exists('*remote_startserver')
  call remote_startserver('VIM')
endif

" Display settings {{{1

set nowrap               " Do not wrap lines for display
set linebreak            " If turning wrap back on, wrap at a whitespace
set relativenumber       " Show relative line numbers
set number               " Show line numbers (relative + absolute => hybrid)
set colorcolumn=80,81,82 " Highlight column 80-82
set showmatch            " Show matching brackets.
set tabstop=4            " Set width of tabstops

" Set whitespace characters in list mode
set listchars=tab:»\ ,trail:-,extends:>,precedes:<,nbsp:+,eol:¬

" Set gui specific options
if has('vim_starting') && has('gui_running')
  set guifont=Noto\ Mono\ 11
  set guioptions+=f        " Dont detach from shell
  set guioptions+=P        " Enable autoselect using the "+-register
  set guioptions-=a        " Disable autoselect using the "*-register
  set guioptions-=T        " Disable toolbar
  set guioptions-=m        " Disable menubar
  set guioptions-=r        " Disable scrollbar
endif

" Key mappings {{{1

" Scroll screen-based instead of line-based
nnoremap k gk
vnoremap k gk
nnoremap j gj
vnoremap j gj
nnoremap gk k
vnoremap gk k
nnoremap gj j
vnoremap gj j
" Navigate splits easily
nnoremap <Leader>h <C-W>h
nnoremap <Leader>j <C-W>j
nnoremap <Leader>k <C-W>k
nnoremap <Leader>l <C-W>l
nnoremap <Leader>v <C-W>v
nnoremap <Leader>s <C-W>s
nnoremap <Leader>c <C-W>c
nnoremap <Leader>q <C-W>q
nnoremap <Leader>= <C-W>=
nnoremap <Leader>p <C-W>p
nnoremap <Leader>w <C-W>w
nnoremap <Leader>x <C-W>x
nnoremap <Leader>z <C-W>z
nnoremap <Leader>H <C-W>H
nnoremap <Leader>J <C-W>J
nnoremap <Leader>K <C-W>K
nnoremap <Leader>L <C-W>L
nnoremap <Leader>Z <C-W>Z
nnoremap <Leader><Left> <C-W><Left>
nnoremap <Leader><Down> <C-W><Down>
nnoremap <Leader><Up> <C-W><Up>
nnoremap <Leader><Right> <C-W><Right>
" Navigate buffers easily
nmap <silent> <Left> :bp<CR>
nmap <silent> <Down> :bl<CR>
nmap <silent> <Up> :bf<CR>
nmap <silent> <Right> :bn<CR>
" Toggle folds with <Space>
nnoremap <expr> <Space>
      \ foldlevel('.') ?
      \ 'za' :
      \ "\<Space>"
" Toggle list mode (display of whitespace) using <Leader>i
nmap <silent> <Leader>i :set list!<CR>
" Hit <LocalLeader>ve/vs to open or navigate to, and re-source, $MYVIMRC
nmap <silent> <LocalLeader>ve :edit $MYVIMRC<CR>
if has('gui_running') && filereadable($MYGVIMRC)
    nmap <silent> <LocalLeader>vs :source $MYVIMRC<CR>:source $MYGVIMRC<CR>
else
    nmap <silent> <LocalLeader>vs :source $MYVIMRC<CR>
endif

" Filetype specific settings {{{1

" tex {{{2
"let g:tex_flavor = 'latex'  " Let's see if leaving this out works

augroup tex
  autocmd!
  autocmd FileType tex,bib setlocal tabstop=2 shiftwidth=2 textwidth=0 wrap
        \ breakindent breakindentopt=shift:2
  autocmd FileType tex setlocal spell
augroup END

" lilypond {{{2
let g:lilypond_vim_dir = split(expand('/usr/share/lilypond/*/vim/'))[-1]
if isdirectory(g:lilypond_vim_dir)
  filetype off
  set rtp+=g:lilypond_vim_dir
  filetype on
  map <silent> <buffer> <LocalLeader>ly :w<CR>:!lilypond %<CR>
endif

augroup lilypond
  autocmd!
  autocmd FileType lilypond setlocal tabstop=2 shiftwidth=2
augroup END

" gitcommit {{{2
augroup gitcommit
  autocmd!
  autocmd FileType gitcommit setlocal spell textwidth=72 formatoptions+=t
augroup END

" scripts {{{2
augroup scripts
  autocmd!
  autocmd FileType vim,javascript,typescript setlocal tabstop=2 shiftwidth=2
augroup END

" c-family {{{2
augroup c_family
  autocmd!
  autocmd FileType c,cpp,objc,objcpp,cuda,cs,go,java setlocal cindent
        \ cinoptions=(0,u0 noexpandtab tabstop=8 shiftwidth=8 foldmethod=syntax
        \ foldnestmax=2
augroup END
