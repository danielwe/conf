" vim: foldmethod=marker

set nocompatible       " Be iMproved
let g:mapleader = ','  " Set <Leader>
if has('win32')
  let $MYVIMRUNTIME = expand('$HOME/vimfiles')
else
  let $MYVIMRUNTIME = expand('$HOME/.vim')
endif

" Plugin configuration {{{1

" Download vim-plug if not installed
let s:plugpath = expand($MYVIMRUNTIME . '/autoload/plug.vim')
if empty(glob(s:plugpath))
  execute "silent !curl -fLo" s:plugpath "--create-dirs"
    \ "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugin development support
function! s:DevelopOrPlug(name)
  let devpath = expand('$HOME/packages/' . a:name)
  if isdirectory(l:devpath)
    Plug l:devpath
  else
    Plug 'danielwe/' . a:name
  endif
endfunction

function! s:Python3VersionMinor()
python3 << EOF
import sys, vim
vim.command("let l:py_version_minor = {}".format(sys.version_info.minor))
EOF
  return l:py_version_minor
endfunction

call plug#begin()

" Editor enhancements {{{2

" tpope tools {{{3
Plug 'tpope/vim-sensible'     " sensible config starting point
Plug 'tpope/vim-endwise'      " automatically and wisely close environments
Plug 'tpope/vim-repeat'       " improve `.'
Plug 'tpope/vim-surround'     " play with brackets, quotes etc.
Plug 'tpope/vim-eunuch'       " integrate shell commands like mv, rm etc.
Plug 'tpope/vim-unimpaired'   " nifty keymappings, learn to use!

" vim-butter {{{3
call s:DevelopOrPlug('vim-butter')  " smoothen buffer navigation
nmap <silent> <Down> :Blast<CR>
nmap <silent> <Up> :Bfirst<CR>
nmap <silent> <Left> :Bprev<CR>
nmap <silent> <Right> :Bnext<CR>
nmap <silent> <C-C> :Bdelete<CR>

" tcomment {{{3
Plug 'tomtom/tcomment_vim'  " toggle comments
let g:tcomment_mapleader1 = "<C-/>"
let g:tcomment_mapleader2 = "g/"
let g:tcomment#options = {'whitespace' : 'no'}

" loupe {{{3
Plug 'wincent/loupe'  " improve search and highlighting
nmap <silent> <Leader>/ <Plug>(LoupeClearHighlight)

" undotree {{{3
Plug 'mbbill/undotree'  " navigate undo tree
nmap <silent> <Leader>u :UndotreeToggle<CR>

" vim-stay {{{3
Plug 'zhimsel/vim-stay'  " keep place in buffer across sessions

" FastFold {{{3
Plug 'Konfekt/FastFold'  " speed up folds

" ListToggle {{{3
Plug 'Valloric/ListToggle'  " toggle location list and quickfix list
"call s:DevelopOrPlug('ListToggle')
let g:lt_quickfix_list_toggle_map = '<Leader>qq'
let g:lt_location_list_toggle_map = '<Leader>ql'

" custom text objects {{{3
Plug 'kana/vim-textobj-user'    " define custom text objects
Plug 'kana/vim-textobj-entire'  " define text objects for the entire buffer
Plug 'Julian/vim-textobj-brace'  " define text objects for content between braces
Plug 'rbonvall/vim-textobj-latex'  " define text objects for latex structures

" IDE-like functionality {{{2

" fuzzy search {{{3
Plug 'junegunn/fzf', {'dir' : '~/local/fzf', 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
nmap <silent> <Leader>ff :Files<CR>
nmap <silent> <Leader>fp :Files $MYVIMRUNTIME/plugged<CR>
nmap <silent> <Leader>fb :Buffers<CR>
nmap <silent> <Leader>fl :Lines<CR>
nmap <silent> <Leader>fh :Helptags<CR>
nmap <silent> <Leader>fc :Commits<CR>

" dirvish {{{3
Plug 'justinmk/vim-dirvish'              " browse directories and files
if v:version >= 800
  Plug 'kristijanhusak/vim-dirvish-git'  " annotate dirvish with git status
endif

" git integration {{{3
Plug 'tpope/vim-fugitive'                 " git status, commit, diff etc.
Plug 'gregsexton/gitv', {'on': ['Gitv']}  " view git history
Plug 'airblade/vim-gitgutter'             " see git diff in gutter, stage hunks
let g:gitgutter_map_keys = 0
nmap <silent> <Leader>gg :Gstatus<CR>
nmap <silent> <Leader>gd :Gdiff<CR>
nmap <silent> <Leader>gl :Gitv<CR>
nmap <silent> <Leader>gf :Gitv!<CR>
nmap <silent> <Leader>gh <Plug>(GitGutterPreviewHunk)
nmap <silent> <Leader>gs <Plug>(GitGutterStageHunk)
nmap <silent> <Leader>gu <Plug>(GitGutterUndoHunk)
nmap <silent> <Leader>gn <Plug>(GitGutterNextHunk)
nmap <silent> <Leader>gp <Plug>(GitGutterPrevHunk)

" YouCompleteMe {{{3
let g:ycm_plug_options = {
      \ 'do': join([
      \   'CC=gcc-8 CXX=g++-8',
      \   has('win32') ? 'py -3' : '/usr/bin/python3',
      \   'install.py --clangd-completer > ' . expand('$HOME/ycm.log') . ' 2>&1',
      \ ]),
      \ }
if s:Python3VersionMinor() < 6
  let g:ycm_plug_options['commit'] = '321700e'
endif
Plug 'Valloric/YouCompleteMe', g:ycm_plug_options
let g:ycm_key_detailed_diagnostics = ''
let g:ycm_min_num_of_chars_for_completion = 5
let g:ycm_max_num_identifier_candidates = 5
let g:ycm_max_num_candidates = 15
let g:ycm_max_num_candidates_to_detail = 0
let s:ycm_goto_filetypes = [
      \ 'c',
      \ 'cpp',
      \ 'objc',
      \ 'objcpp',
      \ 'cuda',
      \ 'cs',
      \ 'go',
      \ 'java',
      \ 'javascript',
      \ 'python',
      \ 'rust',
      \ 'typescript',
      \ ]
let s:ycm_getdoc_filetypes = [
      \ 'c',
      \ 'cpp',
      \ 'objc',
      \ 'objcpp',
      \ 'cuda',
      \ 'cs',
      \ 'go',
      \ 'java',
      \ 'javascript',
      \ 'python',
      \ 'typescript',
      \ 'rust',
      \ ]
augroup GoTo
  execute "autocmd! FileType" join(s:ycm_goto_filetypes, ",")
        \ "map <silent> <buffer> <C-]> :YcmCompleter GoTo<Cr>"
augroup END
augroup GetDoc
  execute "autocmd! FileType" join(s:ycm_getdoc_filetypes, ",")
        \ "map <silent> <buffer> K :YcmCompleter GetDoc<Cr>"
augroup END

" ale/syntastic linter {{{3
let s:ale_version_check = 
      \ (v:version >= 800 && (has("patch-8.0.1476") || !has("patch-8.0.1449")))
if s:ale_version_check
  " see https://github.com/dense-analysis/ale/issues/1536 for details about bug and
  " required patch
  Plug 'dense-analysis/ale'
  "call s:DevelopOrPlug('ale')
  let g:ale_lint_on_text_changed = 'normal'
  let g:ale_lint_on_insert_leave = 1

  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_info_str = 'I'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_format = '%linter% %severity%: %s (%code%)'

  " Configure LSP for supported filetypes
  let g:ale_completion_enabled = 0
  let g:ale_lsp_filetypes = ['julia']
  let s:ale_lsp_filetype_pattern = join(g:ale_lsp_filetypes, ",")
  augroup GoTo
    execute "autocmd! FileType" s:ale_lsp_filetype_pattern
          \ "noremap <silent> <buffer> <C-]> <Plug>(ale_go_to_definition)"
  augroup END
  augroup GetDoc
    execute "autocmd! FileType" s:ale_lsp_filetype_pattern
          \ "noremap <silent> <buffer> K <Plug>(ale_hover)"
  augroup END
else
  Plug 'vim-syntastic/syntastic'
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 0
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0
endif

" snippets {{{3
Plug 'SirVer/ultisnips'                       " snippet engine
Plug 'honza/vim-snippets'                     " snippets
call s:DevelopOrPlug('vim-unicode-snippets')  " unicode snippets with latex triggers
let g:UltiSnipsExpandTrigger = '<C-J>'
let g:UltiSnipsJumpForwardTrigger = '<C-J>'
let g:UltiSnipsJumpBackwardTrigger = '<C-K>'

" Tagbar {{{3
Plug 'majutsushi/tagbar'  " browse tags by scope
let g:tagbar_map_showproto = 'd'
let g:tagbar_map_togglefold = ['o', 'za', '<Space>']
nmap <silent> <Leader>t :TagbarToggle<CR>

" vim-slime {{{3
Plug 'jpalardy/vim-slime'  " send text from buffer to terminal process
let g:slime_no_mappings = 1
nmap <silent> <Leader>r <Plug>SlimeMotionSend
nmap <silent> <Leader>rr <Plug>SlimeLineSend
nmap <silent> <Leader>r<Leader>r <Leader>rr
xmap <silent> <Leader>r <Plug>SlimeRegionSend
if $TERM =~# "tmux" && exists("$TMUX")
  let g:slime_target = "tmux"
  let g:slime_default_config = {
        \ "socket_name": split($TMUX, ",")[0],
        \ "target_pane": ":.1"
        \ }
else
  let g:slime_target = "vimterminal"
endif
let g:slime_vimterminal_config = {"term_finish": "close"}
let g:slime_paste_file = tempname()
let g:slime_python_ipython = 1

" Language/application specific plugins {{{2

" python {{{3
Plug 'tmhedberg/SimpylFold'               " fold python correctly
Plug 'Vimjas/vim-python-pep8-indent'      " indent python correctly
if s:Python3VersionMinor() >= 6
  Plug 'psf/black', {'branch': 'stable'}  " format code
endif
if !s:ale_version_check
  let g:syntastic_python_checkers = ['pycodestyle', 'pyflakes', 'pylint']
endif

" julia {{{3
Plug 'JuliaEditorSupport/julia-vim'  " julia syntax, motions and docs
"call s:DevelopOrPlug('julia-vim')
let g:latex_to_unicode_tab = 0       " use snippets for unicode
augroup GetDoc
  " Clear any GetDoc binding for julia from ycm/ale; julia-vim does it better by setting
  " the juliadoc filetype, and uses 'keywordprg' so doesn't need explicit binding.
  autocmd! FileType julia
augroup END

" latex {{{3
Plug 'KeitaNakamura/tex-conceal.vim', {'for': 'tex'}  " fix tex conceal
let g:tex_superscripts= "[0-9a-zA-W.,:;+-<>/()=]"
let g:tex_subscripts= "[0-9aehijklmnoprstuvx,+-/().]"
let g:tex_conceal = "abdgms"

Plug 'lervag/vimtex'  " complete, compile, view output, parse errors
let g:tex_flavor = 'latex'
let g:vimtex_fold_enabled = 1
let g:vimtex_format_enabled = 1
let g:vimtex_indent_enabled = 1
let g:vimtex_indent_delims = {'open': [], 'close': [], 'include_modified_math': 0}
let g:vimtex_view_method = 'zathura'
let g:vimtex_view_automatic = 0

" restrict folds to evironments that can have enormous content
let g:vimtex_fold_types = {
      \ 'comments': {'enabled': 1},
      \ 'envs': {
      \   'whitelist' : [
      \     'array', 'matrix', 'matrix*', 'bmatrix', 'bmatrix*', 'Bmatrix', 'Bmatrix*',
      \     'pmatrix', 'pmatrix*', 'vmatrix', 'vmatrix*', 'Vmatrix', 'Vmatrix*',
      \     'tabular', 'tabular*', 'tabularx', 'tabulary', 'longtable',
      \     'fmfgraph', 'fmfgraph*',
      \   ]
      \ },
      \ 'cmd_single': {'cmds': ['fmfcmd']},
      \ 'items': {'enabled': 0},
      \}

" don't indent inside evironments that don't subdivide 'content scope'
let g:vimtex_indent_ignored_envs = [
      \ 'document',
      \ 'landscape', 'minipage', 'framed',
      \ 'frame', 'column', 'block', 'alertblock', 'exampleblock',
      \ 'subequations', 'split', 'aligned',
      \ 'subtable', 'subfigure', 'tikzpicture',
      \ 'fmffile',
      \]

" Configure linters
if !exists('g:ale_linters')
  let g:ale_linters = {}
endif
let g:ale_linters['tex'] = ['chktex']
let g:ale_tex_chktex_options = '-I0 -H0 -n3 -n9 -n10 -n17'

" markdown/wiki {{{3
" Pandoc suite for syntax, navigation, citations
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'vim-pandoc/vim-pandoc-after'
let g:pandoc#keyboard#display_options = 0
let g:pandoc#syntax#conceal#blacklist = [
      \ "atx",
      \ "codeblock_start",
      \ "codeblock_delim",
      \ "list",
      \ "ellipses",
      \ "quotes",
      \ ]
let g:pandoc#syntax#conceal#cchar_overrides = {"footnote" : "^"}
let g:pandoc#syntax#conceal#urls = 1
let g:pandoc#formatting#textwidth = 88
let g:pandoc#hypertext#split_open_cmd = "Drop"
let g:pandoc#hypertext#edit_open_cmd = "Drop"
let g:pandoc#hypertext#create_if_no_alternates_exist = 1
let g:pandoc#biblio#use_bibtool = 1
let g:pandoc#biblio#sources = 'bctgy'
let g:pandoc#after#modules#enabled = ["fastfold", "ultisnips"]

" Markdown linting
let g:ale_linter_aliases = {'pandoc': 'markdown'}
let g:ale_markdown_mdl_options = '--rules ~MD009,~MD013,~MD024,~MD036'

" Markdown preview
augroup markserv
  if executable('markserv')
    autocmd! FileType markdown,pandoc command! -buffer Markserv
          \ botright terminal ++rows=2 markserv %:p:.
  endif
augroup END

" Searching
Plug 'alok/notational-fzf-vim'  " Interactive NV-like full-text search
let g:nv_search_paths = ['~/Documents/notatbank']
let g:nv_window_direction = 'left'
let g:nv_preview_direction = 'down'
let g:nv_use_short_pathnames = 1
let g:nv_keymap = {'ctrl-h': 'split', 'ctrl-v': 'vertical split', 'ctrl-t': 'tabedit'}
let g:nv_create_note_window = 'Drop'

" Tagging
call s:DevelopOrPlug('vim-nvtags')
let g:nvtags_tagline_prefix = 'Tags'
let g:nvtags_globs = ['*.md']
nmap <silent> <Leader>na :NVTagsAll!<CR>
nmap <silent> <Leader>nu :NVTagsHere!<CR>
vmap <silent> <Leader>nu <Esc>:execute 'NVTags!' @*<CR>
nmap <silent> <Leader>nt :NTHere<CR>
vmap <silent> <Leader>nt <Esc>:execute 'NT' @*<CR>

" Jump to note index
nmap <silent> <Leader>nr :execute 'edit' g:nv_search_paths[0] . '/README.md'<CR>:Cd<CR>

" Create new note with timestamp as filename
nmap <silent> <Leader>nn :execute 'edit'
      \ g:nv_search_paths[0] . '/' . strftime("%Y%m%d%H%M%S") . '.md'<CR>:Cd<CR>

" toml {{{3
Plug 'cespare/vim-toml'  " add toml syntax

" lilypond {{{3
if !has('win32')
  let s:lilypond_vim_dir = split(expand('/usr/share/lilypond/*/vim/'))[-1]
  if isdirectory(s:lilypond_vim_dir)
    let g:lilypond_enabled = 1
    set rtp+=s:lilypond_vim_dir
  endif
endif

" Display options: colorschemes, status lines etc. {{{2

" vim-airline {{{3
Plug 'vim-airline/vim-airline'
"call s:DevelopOrPlug('vim-airline')
Plug 'vim-airline/vim-airline-themes'
"call s:DevelopOrPlug('vim-airline-themes')
let g:airline#extensions#tabline#enabled = 1

" base16 {{{3
Plug 'chriskempson/base16-vim'  " base16 colorschemes
"call s:DevelopOrPlug('base16-vim')

" Colorizer {{{3
Plug 'chrisbra/Colorizer'  " apply color to rgb sequences

" Currently unused plugins {{{2

"" CCTree {{{3
"Plug 'hari-rangarajan/CCTree', {'for': ['c', 'cpp', 'java']}  " show C call tree

"" LanguageClient {{{3
"if v:version >= 800
"  Plug 'autozimu/LanguageClient-neovim', {'branch': 'next', 'do': 'bash install.sh'}
"  let g:LanguageClient_hoverPreview = "always"
"  let g:LanguageClient_diagnosticsList = "location"
"  let g:LanguageClient_selectionUI = "quickfix"
"endif


"" julia {{{3
"Plug 'AtsushiSakai/julia.vim'  " julia linter

"" markdown/wiki {{{3
"Plug 'iamcco/markdown-preview.nvim', {'do': 'cd app & yarn install'}
"Plug 'suan/vim-instant-markdown', {
"      \ 'do': 'npm -g install instant-markdown-d@next',
"      \ 'for': ['markdown', 'pandoc'],
"      \ }
"      " \ 'do': '& pip install smdv',
"let g:instant_markdown_autostart = 0
"let g:instant_markdown_mathjax = 1
"" let g:instant_markdown_python = 1

"" solarized {{{3
"Plug 'altercation/vim-colors-solarized'

" }}}2

call plug#end()

" Post-plug configuration {{{1

" tpope tools {{{2
if has('vim_starting')
  runtime! plugin/sensible.vim  " load first so options can be overridden
endif

" vim-stay {{{2
execute "set viewdir=" . expand('$MYVIMRUNTIME/view')
set viewoptions=cursor,slash,unix

" autocompletion {{{2
if !exists('g:ycm_semantic_triggers')
  let g:ycm_semantic_triggers = {}
endif
augroup ycm_triggers
  autocmd! VimEnter * let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme
        \| let g:ycm_semantic_triggers.pandoc = '@'
augroup END

if exists('g:ale_lsp_filetypes')
  if !exists('g:ycm_filetype_blacklist')
    let g:ycm_filetype_blacklist = {}
  endif
  for s:ale_lsp_filetype in g:ale_lsp_filetypes
    let g:ycm_filetype_blacklist[s:ale_lsp_filetype] = 1
  endfor
endif

" base16 {{{2
let g:airline_theme = 'base16_vim'
let g:airline_base16_monotone = 1

" The base16 themes seem to work best with background=light. This setting mainly affects
" how vim selects highlighting colors from the palette.
set background=light

" Choose colorscheme. If running in a terminal and termguicolors is not set, any base16
" theme is equivalent, and will give you the base16 theme that the terminal was set up
" with using base16_shell (in particular, the .vimrc_background file from base16_shell
" is unneccesary). In gvim, or with termguicolors set, the theme named below is used.
let s:base16_theme = "base16-atelier-sulphurpool-light"

if ($BASE16_THEME ==# "") && has('termguicolors')
  set termguicolors
else
  if has('gui_running')
    " Don't let a gvim :terminal pretend that it provides a 21-color base16 palette,
    " just because gvim was started from a shell with an active base16 theme. The gvim
    " terminal only provides the terminal_ansi_colors palette.
    let $BASE16_THEME = ""
  else
    if has('termguicolors')
      set notermguicolors
    endif
    let g:base16colorspace = 256
  endif
endif
execute "colorscheme" s:base16_theme

"" solarized {{{2
"colorscheme solarized
"call togglebg#map("<F5>")
"let g:airline_theme = 'solarized'

" General settings {{{1

set encoding=utf-8
set hidden                                " Keep abandoned buffers in the background.
set showcmd                               " Show partial commands in the status area.
set wildmode=longest:full,full            " Set autocomplete command behavior.
set completeopt=menuone,preview,noselect  " Set completion options.
set mouse=a                               " Enable mouse in terminal (all modes).

" Enable persistent undo
set undofile
set undolevels=1000
set undoreload=10000
execute "set undodir=" . expand('$MYVIMRUNTIME/undo')
if !isdirectory(&undodir)
  call mkdir(&undodir)
endif

" Editing behavior
set textwidth=88          " Set default line length. Inspired by black.
set shiftwidth=4          " Set default indentation unit.
set expandtab             " Expand tabs as spaces by default.
set autoindent            " Copy indent from previous line when creating new line.
set copyindent            " Mimic indent structure (tabs/spaces) when doing the above.
set preserveindent        " Mimic existing indent structure when manually adjusting.
set nojoinspaces          " Don't have <S-J> (joining) insert double spaces.
set formatoptions=cql1j   " Set auto-format options.
augroup rc_formatoptions  " Bring out the big guns to override ftplugins.
  autocmd! FileType * setlocal fo-=r fo-=o
augroup END


" Search behavior
set ignorecase            " Do case insensitive matching.
set smartcase             " Do smart case matching.
set hlsearch              " Highlight search.

" Start a server
if !empty($DISPLAY) && has('clientserver') && empty(v:servername)
  call remote_startserver('VIM')
endif

" Display settings {{{1

set tabstop=8
set nowrap                " Do not wrap lines for display.
set linebreak             " If turning wrap back on, wrap at a whitespace.
set numberwidth=2         " Set minimum width of line number column.
set norelativenumber      " Show relative line numbers?
set nonumber              " Show line numbers? (relative & absolute => hybrid)
set colorcolumn=+1,+2,+3  " Highlight columns after textwidth.
set showmatch             " Show matching brackets.
set conceallevel=2        " Enable conceal when defined

" Set whitespace characters in list mode and folds
set listchars=eol:$,tab:\|_,space:.,extends:>,precedes:<,conceal:*,nbsp:~
set fillchars=fold:\ 

" Set gui specific options
if has('vim_starting') && has('gui_running')
  if !has('win32')
    set guifont=Ubuntu\ Mono\ 12
  endif
  set guioptions+=f       " Dont detach from shell.
  set guioptions+=P       " Enable autoselect using the "+-register.
  set guioptions-=a       " Disable autoselect using the "*-register.
  set guioptions-=T       " Disable toolbar.
  set guioptions-=m       " Disable menubar.
  set guioptions-=r       " Disable scrollbar.
endif

" Avoid issues after vim-8.2.0767 with terminals presumably too old
" to handle t_TI and t_TE. Remove once we have all moved on, e.g. to Ubuntu 20.04. See:
" * https://github.com/vim/vim/issues/6111
" * https://github.com/vim/vim/issues/6112
" * https://github.com/vim/vim/issues/6122
set t_TI= t_TE=

" Key mappings and commands {{{1

" Scroll screen-based instead of line-based
noremap k gk
noremap j gj
noremap gk k
noremap gj j

" Navigate windows easily: map ; to <C-W> (see :h CTRL-W)
nnoremap ; <C-W>

" Toggle folds with <Space>
nnoremap <expr> <Space> foldlevel('.') ? 'za' : '\<Space>'

" Hit <Leader><Space> to toggle list mode
nmap <silent> <Leader><Space> :set list!<CR>

" Hit <Leader>, to Drop $MYVIMRC, and <Leader>. to source it and reload current buffer
nmap <silent> <Leader>, :Drop $MYVIMRC<CR>
if !exists('*s:LoadRc')
  function! s:LoadRc()
    source $MYVIMRC
    if has('gui_running') && filereadable($MYGVIMRC)
       source $MYGVIMRC
    endif
    silent! edit
  endfunction
endif
nmap <silent> <Leader>. :call <SID>LoadRc()<CR>

" Enable mouse scrolling in vim terminal
function! ExitTerminalNormal()
  nunmap <buffer> <silent> <RightMouse>
  call feedkeys("i")
endfunction

function! MapExitTerminalNormal()
  nmap <buffer> <silent> <RightMouse> :call ExitTerminalNormal()<CR>
endfunction

if has('terminal')
  tmap <silent> <ScrollWheelUp> <C-W>N<C-Y>:call MapExitTerminalNormal()<CR>
  tmap <silent> <ScrollWheelDown> <C-W>N<C-E>:call MapExitTerminalNormal()<CR>
endif

" Change the (local) directory to that of current file with :Cd (:Lcd)
command! Cd cd %:h
command! Lcd lcd %:h

" Available unmodified keys after ;: aemuy,'\/[0123456789`<Space>

" Filetype-specific configuration {{{1

" wrap {{{2
augroup rc_textwidth
  " For unwrapped prose, wrap long lines and indicate with a hanging indent (don't apply
  " to, e.g., help, since it often contains manual alignment that doesn't mix with soft
  " wrapping at all). Do the same when a nonexistent file is opened in a preview window
  " (this is a common mechanism for displaying documentation).
  let s:setprosewrap = "setlocal textwidth=0 wrap breakindent breakindentopt=shift:2"
  execute "autocmd! FileType text,tex,bib,markdown,pandoc" s:setprosewrap
  execute "autocmd! BufNewFile * if &previewwindow |" s:setprosewrap "| endif"
  autocmd! TerminalOpen * setlocal textwidth=0
augroup END

" spell {{{2
augroup rc_spell
  autocmd! FileType markdown,pandoc,tex,gitcommit setlocal spell spelllang=en,nb
augroup END

" compile {{{2
augroup rc_compile
  if exists('g:lilypond_enabled') && g:lilypond_enabled
    autocmd! FileType lilypond nmap <silent> <buffer> <LocalLeader>ll :!lilypond %<CR>
  endif
augroup END

" autoindent {{{2
augroup rc_autoindent
  autocmd! FileType c,cpp,cuda,objc,objcpp,go,java,javascript,rust,typescript
        \ setlocal cindent cinoptions=t0,(0,u0,U1,w1,Ws,m1
augroup END

" indentation unit {{{2
" Set filetype specific indentation unit, i.e., shiftwidth. To use tab as the
" indentation unit, set shiftwidth=0 and noexpandtab. A nonzero shiftwidth and
" noexpandtab will give hideous mixed indents (unless shiftwidth happens to equal
" tabstop, but editing behavior should not depend on a display setting like tabstop).
augroup rc_indentunit
  autocmd! FileType vim,sh,javascript,typescript,tex,bib,markdown,pandoc
        \ setlocal shiftwidth=2 expandtab
  autocmd! FileType c,cpp,cuda,go setlocal shiftwidth=0 noexpandtab
  autocmd! FileType java,rust setlocal shiftwidth=4 expandtab
augroup END

" folding {{{2
augroup rc_fold
  autocmd! FileType c,cpp,cuda,objc,objcpp,cs,go,java,javascript,rust,typescript
        \ setlocal foldmethod=syntax foldnestmax=2
  autocmd! FileType julia setlocal foldmethod=syntax foldnestmax=2
augroup END
