" vim: foldmethod=marker

set nocompatible       " Be iMproved
let g:mapleader = ','  " Set <Leader>

" Plugin configuration {{{1

" Download vim-plug if not installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugin development support
function! s:DevelopOrPlug(development_path, production_path)
  if isdirectory(expand(a:development_path))
    Plug a:development_path
  else
    Plug a:production_path
  endif
endfunction

call plug#begin()

" Editor enhancements {{{2

" tpope tools {{{3
" Load sensible first, so options can be overridden
Plug 'tpope/vim-sensible'  " sensible config starting point
runtime! plugin/sensible.vim

Plug 'tpope/vim-endwise'   " automatically and wisely close environments
Plug 'tpope/vim-repeat'    " improve `.'
Plug 'tpope/vim-surround'  " play with brackets, quotes etc.
Plug 'tpope/vim-eunuch'    " integrate shell commands like mv, rm etc.
Plug 'tpope/vim-unimpaired'  " nifty keymappings, learn to use!

" vim-butter {{{3
" smoothen buffer navigation
call s:DevelopOrPlug('~/packages/vim-butter', 'danielwe/vim-butter')
nmap <silent> <Down> :Blast<CR>
nmap <silent> <Up> :Bfirst<CR>
nmap <silent> <Left> :Bprev<CR>
nmap <silent> <Right> :Bnext<CR>
nmap <silent> <C-C> :Bdelete<CR>

" Hit <Leader>, to Drop $MYVIMRC, and <Leader>. to source
nmap <silent> <Leader>, :Drop $MYVIMRC<CR>
if has('gui_running') && filereadable($MYGVIMRC)
    nmap <silent> <Leader>. :source $MYVIMRC<CR>:source $MYGVIMRC<CR>
else
    nmap <silent> <Leader>. :source $MYVIMRC<CR>
endif

" tcomment {{{3
Plug 'tomtom/tcomment_vim'  " toggle comments
let g:tcomment_mapleader1 = "<C-/>"
let g:tcomment_mapleader2 = "g/"
let g:tcomment#options = {'whitespace' : 'no'}

" loupe {{{3
Plug 'wincent/loupe'  " improve vim search and highlighting
nmap <silent> <Leader><Space> <Plug>(LoupeClearHighlight)

" vim-grepper {{{3
Plug 'mhinz/vim-grepper'  " grep inside vim
if !exists('g:grepper')
  let g:grepper = {}
endif
let g:grepper.highlight = 1
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)

" undotree {{{3
Plug 'mbbill/undotree'  " navigate undo tree
nmap <silent> <Leader>u :UndotreeToggle<CR>

" vim-stay {{{3
Plug 'zhimsel/vim-stay'  " don't lose place in buffer

" FastFold {{{3
Plug 'Konfekt/FastFold'  " speed up folds

" ListToggle {{{3
Plug 'Valloric/ListToggle'  " toggle location list and quickfix list
let g:lt_location_list_toggle_map = '<Leader>el'
let g:lt_quickfix_list_toggle_map = '<Leader>eq'

" IDE-like functionality {{{2

" fuzzy search {{{3
if has('ruby')
  Plug 'wincent/command-t',
        \ {'do': 'cd ruby/command-t/ext/command-t && ruby extconf.rb && make'}
  nmap <silent> <C-T> <Plug>(CommandT)
  nmap <silent> <C-B> <Plug>(CommandTBuffer)
  nmap <silent> <C-J> <Plug>(CommandTJump)
  nmap <silent> <C-H> <Plug>(CommandTHelp)
  " terminal compatibility: the tale of arrow keys and esc
  if (&term =~# "xterm") || (&term =~# "tmux")
    " esc is not mapped by default in xterm, let's fix that
    " (not actually needed for tmux, but doesn't hurt)
    let g:CommandTCancelMap = ['<C-C>', '<ESC>']
    " now esc is mapped and arrow keys will misbehave, let's fix that
    let g:CommandTSelectNextMap = ['<C-N>', '<C-J>', '<Down>', '<ESC>OB']
    let g:CommandTSelectPrevMap = ['<C-P>', '<C-K>', '<Up>', '<ESC>OA']
    let g:CommandTSelectLeftMap = ['<Left>', '<C-H>', '<ESC>OD']
    let g:CommandTSelectRightMap = ['<Right>', '<C-L>', '<ESC>OC']
  endif
else
  Plug 'ctrlpvim/ctrlp.vim'
  let g:ctrlp_map = '<C-T>'
  nmap <silent> <C-B> :CtrlPBuffer<CR>
endif

" dirvish {{{3
Plug 'justinmk/vim-dirvish'            " browse directories and files
if v:version >= 800
  Plug 'kristijanhusak/vim-dirvish-git'  " annotate dirvish with git status
endif

" git integration {{{3
Plug 'tpope/vim-fugitive'                 " git status, commit, diff etc.
Plug 'gregsexton/gitv', {'on': ['Gitv']}  " view git history
Plug 'airblade/vim-gitgutter'             " see git diff in gutter, stage hunks
let g:gitgutter_map_keys = 0
nmap <silent> <Leader>gg :Gstatus<CR>
nmap <silent> <Leader>gd :Gdiff<CR>
nmap <silent> <Leader>gl :Gitv<CR>
nmap <silent> <Leader>gf :Gitv!<CR>
nmap <silent> <Leader>gh <Plug>GitGutterPreviewHunk
nmap <silent> <Leader>gs <Plug>GitGutterStageHunk
nmap <silent> <Leader>gu <Plug>GitGutterUndoHunk
nmap <silent> <Leader>gn <Plug>GitGutterNextHunk
nmap <silent> <Leader>gp <Plug>GitGutterPrevHunk

" YouCompleteMe {{{3
" autocomplete
Plug 'Valloric/YouCompleteMe',
      \ {'do': '/usr/bin/python3 install.py --clang-completer > ~/ycm.log'}
let g:ycm_key_detailed_diagnostics = ''
if !exists('g:ycm_semantic_triggers')
  let g:ycm_semantic_triggers = {}
endif
if !exists('g:ycm_filetype_blacklist')
  let g:ycm_filetype_blacklist = {}
endif
let g:ycm_goto_filetypes = [
      \ 'c',
      \ 'cpp',
      \ 'objc',
      \ 'objcpp',
      \ 'cuda',
      \ 'cs',
      \ 'go',
      \ 'java',
      \ 'javascript',
      \ 'python',
      \ 'rust',
      \ 'typescript',
      \ ]
let g:ycm_getdoc_filetypes = [
      \ 'c',
      \ 'cpp',
      \ 'objc',
      \ 'objcpp',
      \ 'cuda',
      \ 'cs',
      \ 'java',
      \ 'javascript',
      \ 'python',
      \ 'typescript',
      \ 'rust',
      \ ]
augroup GoTo
  execute "autocmd! FileType" join(g:ycm_goto_filetypes, ",")
        \ "map <silent> <buffer> go :YcmCompleter GoTo<Cr>"
augroup END
augroup GetDoc
  execute "autocmd! FileType" join(g:ycm_getdoc_filetypes, ",")
        \ "map <silent> <buffer>K :YcmCompleter GetDoc<Cr>"
augroup END

" linting and LSP {{{3
if v:version >= 800
  call s:DevelopOrPlug('~/packages/ale', 'danielwe/ale')
  "Plug 'w0rp/ale'
  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_info_str = 'I'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_format = '%linter% %severity%: %s (%code%)'

  " Configure LSP for supported filetypes
  let g:ale_completion_enabled = 1
  let g:ale_lsp_filetypes = ['julia']
  let s:ale_lsp_filetype_pattern = join(g:ale_lsp_filetypes, ",")
  augroup GoTo
    execute "autocmd! FileType" s:ale_lsp_filetype_pattern
          \ "noremap <silent> <buffer> go :ALEGoToDefinition<CR>"
  augroup END
  augroup GetDoc
    execute "autocmd! FileType" s:ale_lsp_filetype_pattern
          \ "noremap <silent> <buffer> K :ALEHover<CR>"
  augroup END

  for s:ft in g:ale_lsp_filetypes
    let g:ycm_filetype_blacklist[s:ft] = 1
  endfor
  unlet s:ale_lsp_filetype_pattern
  unlet s:ft
else
  Plug 'vim-syntastic/syntastic'
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 0
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0
endif
if !exists('g:ale_linters_ignore')
  let g:ale_linters_ignore = {}
endif

" snippets {{{3
Plug 'SirVer/ultisnips'    " snippet engine
Plug 'honza/vim-snippets'  " snippets
" unicode snippets with latex triggers
call s:DevelopOrPlug('~/packages/vim-unicode-snippets',
      \              'danielwe/vim-unicode-snippets')
let g:UltiSnipsExpandTrigger = '<C-J>'
let g:UltiSnipsJumpForwardTrigger = '<C-J>'
let g:UltiSnipsJumpBackwardTrigger = '<C-K>'

" Tagbar {{{3
Plug 'majutsushi/tagbar'  " browse tags by scope
let g:tagbar_map_showproto = 'd'
let g:tagbar_map_togglefold = ['o', 'za', '<Space>']
nmap <silent> <Leader>' :TagbarToggle<CR>

" vim-slime {{{3
Plug 'jpalardy/vim-slime'  " send text from buffer to terminal process
let g:slime_no_mappings = 1
nmap <silent> gr <Plug>SlimeMotionSend
nmap <silent> grr <Plug>SlimeLineSend
xmap <silent> gr <Plug>SlimeRegionSend
if &term =~# "tmux"
  let g:slime_target = "tmux"
  let g:slime_default_config = {
        \ "socket_name": split($TMUX, ",")[0],
        \ "target_pane": ":.1"
        \ }
else
  let g:slime_target = "vimterminal"
  let g:slime_vimterminal_config = {"term_finish": "close"}
endif
let g:slime_paste_file = tempname()
let g:slime_python_ipython = 1

" Language specific plugins {{{2

" python {{{3
Plug 'tmhedberg/SimpylFold'           " fold python correctly
Plug 'Vimjas/vim-python-pep8-indent'  " indent python correctly
let g:syntastic_python_checkers = ['pycodestyle', 'pyflakes', 'pylint']

" julia {{{3
" julia syntax, motions and docs
"call s:DevelopOrPlug('~/packages/julia-vim', 'danielwe/julia-vim')
Plug 'JuliaEditorSupport/julia-vim'
let g:latex_to_unicode_tab = 0  " turn off latex to unicode, use snippets
augroup GetDoc
  " Clear any GetDoc bindings from ycm/ale; julia-vim does it better due to
  " juliadoc filetype support
  autocmd! FileType julia
augroup END

" latex {{{3
Plug 'lervag/vimtex'  " complete, compile, view output, parse errors
let g:vimtex_view_automatic = 0
let g:vimtex_view_method = 'zathura'
let g:vimtex_fold_enabled = 1
let g:vimtex_complete_enabled = 1
let g:vimtex_complete_close_braces = 0
"let g:vimtex_quickfix_latexlog = {
"      \ 'overfull' : 0,
"      \ 'underfull' : 0,
"      \ 'packages' : {
"      \   'default' : 0,
"      \ },
"      \}

" Display options: colorschemes, status lines etc. {{{2

" vim-airline {{{3
" improved status line and buffer line
"call s:DevelopOrPlug('~/packages/vim-airline', 'danielwe/vim-airline')
Plug 'vim-airline/vim-airline'
" colorscheme-specific line themes
"call s:DevelopOrPlug('~/packages/vim-airline-themes',
"      \              'danielwe/vim-airline-themes')
Plug 'vim-airline/vim-airline-themes'
let g:airline#extensions#tabline#enabled = 1

" base16 {{{3
" base16 colorschemes
call s:DevelopOrPlug('~/packages/base16-vim', 'danielwe/base16-vim')
"Plug 'chriskempson/base16-vim'

" Colorizer {{{3
Plug 'chrisbra/Colorizer'  " color rgb sequences

" Currently unused plugins {{{2

"" CCTree {{{3
"" build and show call tree in C
"Plug 'hari-rangarajan/CCTree', \ {'for': ['c', 'cpp', 'java']}

"" language client {{{3
"if v:version >= 800
"  Plug 'autozimu/LanguageClient-neovim', {
"        \ 'branch': 'next',
"        \ 'do': 'bash install.sh',
"        \ }
"  let g:LanguageClient_hoverPreview = "always"
"  let g:LanguageClient_diagnosticsList = "location"
"  let g:LanguageClient_selectionUI = "quickfix"
"  if !exists('g:LanguageClient_serverCommands')
"    let g:LanguageClient_serverCommands = {}
"  endif
"endif


"" julia {{{3
"Plug 'AtsushiSakai/julia.vim'  " julia linting

"" solarized {{{3
"Plug 'altercation/vim-colors-solarized'  " solarized colorscheme

" }}}2

call plug#end()

" Post-plug configuration {{{1

" vim-stay {{{2
set viewoptions=cursor,slash,unix

" latex {{{2
let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme

" base16 {{{2
let g:airline_theme = 'base16_vim'
let g:airline_base16_monotone = 1

" Now choose colorscheme. If running in a terminal and termguicolors is not
" set, any base16 theme is equivalent, and will give you the base16 theme that
" the terminal was set up with using base16_shell (in particular, the
" .vimrc_background file from base16_shell is unneccesary). In gvim, or with
" termguicolors set, the exact theme named below will be used.
let s:base16_theme = "base16-atelier-dune-light"

if ($BASE16_THEME ==# "") && has('termguicolors')
  set termguicolors
else
  if has('gui_running')
    " Don't let a gvim :terminal pretend that it provides a 21-color base16
    " palette, just because gvim was started from a shell with an active base16
    " theme. The gvim terminal only provides the terminal_ansi_colors palette.
    let $BASE16_THEME = ""
  else
    if has('termguicolors')
      set notermguicolors
    endif
    let g:base16colorspace = 256
  endif
endif
execute "colorscheme" s:base16_theme
unlet s:base16_theme

"" solarized {{{2
"colorscheme solarized
"call togglebg#map("<F5>")
"let g:airline_theme = 'solarized'

" General settings {{{1

set autowrite            " Save before commands like :next and :make
set hidden               " Keep abandoned buffers around in the background
set showcmd              " Show number of selected lines ++ in the bottom line
set noswapfile           " Do not use swap file
set wildmode=longest:full,full " Set autocomplete command behavior
set completeopt=menuone,preview,noselect " Set completion options
set mouse=a              " Enable mouse usage (all modes)

" Enable persistent undo
set undofile
set undolevels=1000
set undoreload=10000
set undodir=$HOME/.vim/undo
if !isdirectory(&undodir)
  call mkdir(&undodir)
endif

" Editing behavior
set copyindent           " Don't replace tabs with spaces when copying indent
set preserveindent       " Don't replace tabs with spaces when adjusting indent
set expandtab            " Expand tabs as spaces
set shiftwidth=4         " Set width of autoindentation
let g:default_textwidth = 79  " Auto-format (gq etc.) wraps here (0: disable)
execute "set textwidth=" . g:default_textwidth
set nojoinspaces         " Don't have <S-J> (joining) insert double spaces.
set formatoptions=cql1j  " Set auto-format options
augroup autoformat       " Bring out the big guns to override ftplugins
  autocmd!
  autocmd FileType * set fo-=r fo-=o
augroup END


" Search behavior
set ignorecase           " Do case insensitive matching
set smartcase            " Do smart case matching
set hlsearch             " Highlight search

" Always start a server
if empty(v:servername) && exists('*remote_startserver')
  call remote_startserver('VIM')
endif

" Display settings {{{1

set nowrap               " Do not wrap lines for display
set linebreak            " If turning wrap back on, wrap at a whitespace
set numberwidth=2        " Set minimum width of line number column
set norelativenumber     " Show relative line numbers?
set nonumber             " Show line numbers? (relative + absolute => hybrid)
set colorcolumn=+1,+2,+3 " Highlight columns after textwidth
set showmatch            " Show matching brackets.
set tabstop=4            " Set width of tabstops

" Set whitespace characters in list mode
set listchars=eol:$,tab:\|\ ,trail:-,space:.,extends:>,precedes:<,conceal:*,nbsp:~

" Set gui specific options
if has('vim_starting') && has('gui_running')
  set guifont=Noto\ Mono\ 11
  set guioptions+=f        " Dont detach from shell
  set guioptions+=P        " Enable autoselect using the "+-register
  set guioptions-=a        " Disable autoselect using the "*-register
  set guioptions-=T        " Disable toolbar
  set guioptions-=m        " Disable menubar
  set guioptions-=r        " Disable scrollbar
endif

" Terminal color hack for gvim and tmux (see |terminal-unix|--- the problem is
" the nonsensical fallbacks)
if has('gui_running')
  " This is safe: gvim handles keys on its own.
  let $TERM = 'xterm-256color'
elseif &term =~# '256color'  " e.g., tmux-256color
  " This is experimental: could lead vim to misunderstand some keys. Seems to
  " work fine in tmux, however.
  set term=xterm-256color
endif

" Key mappings and commands {{{1

" Scroll screen-based instead of line-based
noremap k gk
noremap j gj
noremap gk k
noremap gj j

" Navigate windows easily; <Leader> as <C-W>. See :h opening-window.
nnoremap <Leader> <C-W>

" Toggle folds with <Space>
nnoremap <expr> <Space>
      \ foldlevel('.') ?
      \ 'za' :
      \ "\<Space>"

" Hit <Leader>/ to toggle list mode
nmap <silent> <Leader>\ :set list!<CR>

" Enable mouse scrolling in terminal mode
function! ExitTerminalNormal()
  nunmap <buffer> <silent> <RightMouse>
  call feedkeys("i")
endfunction

function! MapExitTerminalNormal()
  nmap <buffer> <silent> <RightMouse> :call ExitTerminalNormal()<CR>
endfunction

if has('terminal')
  tmap <silent> <ScrollWheelUp> <C-W>N<C-Y>:call MapExitTerminalNormal()<CR>
  tmap <silent> <ScrollWheelDown> <C-W>N<C-E>:call MapExitTerminalNormal()<CR>
endif

" Change the (local) directory to that of current file with :Cd (:Lcd)
command! Cd cd %:h
command! Lcd lcd %:h

" Available unmodified keys to follow leader: imy;/[]0123456789`

" File/buffer/window type specific settings {{{1

" tex {{{2
"let g:tex_flavor = 'latex'  " Let's see if leaving this out works

augroup tex
  autocmd!
  autocmd FileType tex,bib setlocal tabstop=2 shiftwidth=2 textwidth=0 wrap
        \ breakindent breakindentopt=shift:2
  autocmd FileType tex setlocal spell
augroup END

" lilypond {{{2
let g:lilypond_vim_dir = split(expand('/usr/share/lilypond/*/vim/'))[-1]
if isdirectory(g:lilypond_vim_dir)
  filetype off
  set rtp+=g:lilypond_vim_dir
  filetype on
endif

augroup lilypond
  autocmd!
  autocmd FileType lilypond setlocal tabstop=2 shiftwidth=2
  autocmd FileType lilypond
        \ nmap <silent> <buffer> <LocalLeader>ly :!lilypond %<CR>
augroup END

" gitcommit {{{2
augroup gitcommit
  autocmd!
  autocmd FileType gitcommit setlocal spell textwidth=72 formatoptions+=t
augroup END

" script languages {{{2
augroup scripts
  autocmd!
  autocmd FileType vim,javascript,typescript setlocal tabstop=2 shiftwidth=2
augroup END

" c-family {{{2
augroup c_family
  autocmd!
  autocmd FileType c,cpp,objc,objcpp,cuda,cs,go,java setlocal cindent
        \ cinoptions=(0,u0 noexpandtab tabstop=8 shiftwidth=8 foldmethod=syntax
        \ foldnestmax=2
augroup END

" reading buffers and windows {{{2
" Zero the textwidth in help buffers and other reading windows to erase right
" side column highlighting.
augroup reading
  autocmd!
  autocmd BufWinEnter *
        \ if &buftype ==# "help" || &previewwindow
        \ | setlocal textwidth=0
        \ | endif
augroup END
